#!/usr/bin/env python3

import re
from gradelib import *

r = Runner(save("xv6.out"))

PTE_PRINT = """page table 0x0000000087f6e000
 ..0: pte 0x0000000021fda801 pa 0x0000000087f6a000
 .. ..0: pte 0x0000000021fda401 pa 0x0000000087f69000
 .. .. ..0: pte 0x0000000021fdac1f pa 0x0000000087f6b000
 .. .. ..1: pte 0x0000000021fda00f pa 0x0000000087f68000
 .. .. ..2: pte 0x0000000021fd9c1f pa 0x0000000087f67000
 ..255: pte 0x0000000021fdb401 pa 0x0000000087f6d000
 .. ..511: pte 0x0000000021fdb001 pa 0x0000000087f6c000
 .. .. ..510: pte 0x0000000021fdd807 pa 0x0000000087f76000
 .. .. ..511: pte 0x0000000020001c0b pa 0x0000000080007000"""

VAL_RE = "(0x00000000[0-9a-f]+)"
INDENT_RE = r"\s*\.\.\s*"
INDENT_ESC = "\\\s*\.\.\\\s*"

@test(10, "pte printout")
def test_pteprint():
    first = True
    r.run_qemu(shell_script([
        'echo hi'
    ]))
    r.match('^hi')
    p = re.compile(VAL_RE)
    d = re.compile(INDENT_RE)
    for l in PTE_PRINT.splitlines():
        l = d.sub(INDENT_ESC, l)
        l = p.sub(VAL_RE, l)
        r.match(r'^{}$'.format(l))
        if first:
            first = False
        else:
            matches = re.findall(r'^{}$'.format(l), r.qemu.output, re.MULTILINE)
            assert_equal(len(matches[0]), 2)
            pa = (int(matches[0][0], 16) >> 10) << 12
            assert_equal(int(matches[0][1], 16), pa)

@test(0, "running lazytests")
def test_lazytests():
    r.run_qemu(shell_script([
        'lazytests'
    ]))

@test(25, "lazy: map", parent=test_lazytests)
def test_filetest():
    r.match("^test lazy unmap: OK$")

@test(25, "lazy: unmap", parent=test_lazytests)
def test_memtest():
    r.match("test lazy alloc: OK$")

@test(0, "usertests")
def test_usertests():
    r.run_qemu(shell_script([
        'usertests'
    ]), timeout=600)

def usertest_check(testcase, nextcase, output):
    if not re.search(r'\ntest {}: [\s\S]*OK\ntest {}'.format(testcase, nextcase), output):
        raise AssertionError('Failed ' + testcase)

@test(2, "usertests: pgbug", parent=test_usertests)
def test_pgbug():
    usertest_check("pgbug", "sbrkbugs", r.qemu.output)

@test(2, "usertests: sbrkbugs", parent=test_usertests)
def test_sbrkbugs():
    usertest_check("sbrkbugs", "badarg", r.qemu.output)

@test(2, "usertests: argptest", parent=test_usertests)
def test_argptest():
    usertest_check("argptest", "stacktest", r.qemu.output)

@test(2, "usertests: sbrkmuch", parent=test_usertests)
def test_sbrkmuch():
    usertest_check("sbrkmuch", "kernmem", r.qemu.output)

@test(2, "usertests: sbrkfail", parent=test_usertests)
def test_sbrkfail():
    usertest_check("sbrkfail", "sbrkarg", r.qemu.output)

@test(3, "usertests: sbrkarg", parent=test_usertests)
def test_sbrkarg():
    usertest_check("sbrkarg", "validatetest", r.qemu.output)

@test(3, "usertests: stacktest", parent=test_usertests)
def test_stacktest():
    usertest_check("stacktest", "textwrite", r.qemu.output)

@test(1, "usertests: execout", parent=test_usertests)
def test_execout():
    usertest_check("execout", "diskfull", r.qemu.output)

@test(1, "usertests: copyin", parent=test_usertests)
def test_copyin():
    usertest_check("copyin", "copyout", r.qemu.output)

@test(1, "usertests: copyout", parent=test_usertests)
def test_copyout():
    usertest_check("copyout", "copyinstr1", r.qemu.output)

@test(1, "usertests: copyinstr1", parent=test_usertests)
def test_copyinstr1():
    usertest_check("copyinstr1", "copyinstr2", r.qemu.output)

@test(1, "usertests: copyinstr2", parent=test_usertests)
def test_copyinstr2():
    usertest_check("copyinstr2", "copyinstr3", r.qemu.output)

@test(1, "usertests: copyinstr3", parent=test_usertests)
def test_copyinstr3():
    usertest_check("copyinstr3", "rwsbrk", r.qemu.output)

@test(1, "usertests: rwsbrk", parent=test_usertests)
def test_rwsbrk():
    usertest_check("rwsbrk", "truncate1", r.qemu.output)


@test(3, "usertests: sbrk8000", parent=test_usertests)
def test_sbrk8000():
    usertest_check("sbrk8000", "badarg", r.qemu.output)

@test(1, "usertests: reparent", parent=test_usertests)
def test_reparent():
    usertest_check("reparent", "twochildren", r.qemu.output)

@test(1, "usertests: twochildren", parent=test_usertests)
def test_twochildren():
    usertest_check("twochildren", "forkfork", r.qemu.output)

@test(1, "usertests: forkfork", parent=test_usertests)
def test_forkfork():
    usertest_check("forkfork", "forkforkfork", r.qemu.output)

@test(1, "usertests: forkforkfork", parent=test_usertests)
def test_forkforkfork():
    usertest_check("forkforkfork", "argptest", r.qemu.output)


@test(1, "usertests: exectest", parent=test_usertests)
def test_exectest():
    usertest_check("exectest", "bigargtest", r.qemu.output)


@test(1, "usertests: sbrkbasic", parent=test_usertests)
def test_sbrkbasic():
    usertest_check("sbrkbasic", "sbrkmuch", r.qemu.output)

@test(1, "usertests: kernmem", parent=test_usertests)
def test_kernmem():
    usertest_check("kernmem", "sbrkfail", r.qemu.output)


@test(1, "usertests: mem", parent=test_usertests)
def test_mem():
    usertest_check("mem", "sharedfd", r.qemu.output)

@test(1, "usertests: forktest", parent=test_usertests)
def test_forktest():
    usertest_check("forktest", "sbrkbasic", r.qemu.output)

@test(5, "usertests: all tests", parent=test_usertests)
def test_usertests():
    r.match('^ALL TESTS PASSED$')


run_tests()
